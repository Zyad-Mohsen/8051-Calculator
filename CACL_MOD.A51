KEYPAD 	EQU P2 
LCD_BUS EQU P1
RS 		EQU P3.0
EN 		EQU P3.1
COUNTER EQU R4
TEMP1	EQU R6
TEMP2	EQU R7
TEMP3	EQU R5
;-----------------------------------
ORG 00H
AGAIN:
ACALL READ_KEY		
MOV R0,#50H				;SET ADDRESS FOR FIRST OPERAND
ACALL LCD_INIT	
MOV A,TEMP3		
CJNE A,#'C',FIRST		;CHECK IF CLEAR PRESSED
SJMP AGAIN	
FIRST:ACALL SEND_DATA	;PRINT FIRST OPERAND
MOV @R0,A				;STORE AT ADDRESS OF R0 
INC R0
;-------------
OP:ACALL READ_KEY		;READ OPERATOR
CJNE A,#'C',SECOND
ACALL CLEAR
SJMP AGAIN		
SECOND:ACALL SEND_DATA
MOV @R0,A
INC R0
;-------------
N2:ACALL READ_KEY		;READ SECOND OPERAND
CJNE A,#'C',THIRD
ACALL CLEAR
DEC R0
SJMP OP
THIRD:ACALL SEND_DATA
MOV @R0,A
;-------------
HERE: ACALL READ_KEY	
CJNE A,#'C',FOURTH
ACALL CLEAR
SJMP N2
FOURTH:CJNE A,#'=',HERE		;WAIT FOR ASSIGNMENT OPERATOR
ACALL SEND_DATA
;-------------
MOV A,51H
CJNE A,#'+',NEXT1		;DETERMINES WHICH OPERATOR IS PRESSED
ACALL SUM
SJMP AGAIN
NEXT1:
CJNE A,#'-',NEXT2
ACALL SUB
SJMP AGAIN
NEXT2:
CJNE A,#'*',NEXT3
ACALL PRODUCT
SJMP AGAIN
NEXT3:
CJNE A,#'/',NOT_OP 		;USER PRESSED A KEY OTHER THAN AN OPERATOR
ACALL DIVISION
SJMP AGAIN
NOT_OP: ACALL ERROR	
SJMP AGAIN
;------------------------------------------------------------------------------------------------
SUM:
MOV A,#0CEH				;SETS THE CURSOR TO SECOND ROW
ACALL SEND_COMMAND
ACALL GET_OPERAND
ADD A,B
ACALL BCD
RET
;--------------------------------
SUB:
ACALL GET_OPERAND
CLR C
SUBB A,B
JC NEGATIVE			;CHECKS IF SUBTRACTION RESULT IS NEGATIVE
ADD A,#30H
MOV TEMP1,A
MOV A,#0CFH
ACALL SEND_COMMAND
MOV A,TEMP1
ACALL SEND_DATA
LJMP AGAIN
NEGATIVE:
CPL A
ADD A,#01H
MOV TEMP1,A
MOV A,#0CEH
ACALL SEND_COMMAND
MOV A,#'-'
ACALL SEND_DATA
MOV A,TEMP1
ADD A,#30H
ACALL SEND_DATA
RET
;---------------------------------
PRODUCT:
MOV A,#0CEH
ACALL SEND_COMMAND
ACALL GET_OPERAND
MUL AB
ACALL BCD
RET
;---------------------------------
DIVISION: 
ACALL GET_OPERAND
MOV TEMP2,B
CJNE TEMP2,#0,DIVIDE
ACALL ERROR
LJMP AGAIN
DIVIDE: 
DIV AB
ADD A,#30H
MOV TEMP1,A
MOV A,#0CCH
ACALL SEND_COMMAND
MOV A,TEMP1				
ACALL SEND_DATA
MOV A,#'.'
ACALL SEND_DATA
MOV COUNTER,#2
L5: MOV A,#10
MUL AB				;CONVERTS THE RESULT TO A DIGIT AND FRACTION 
MOV B,TEMP2			;FOR EXAMPLE "1.25"
DIV AB
ADD A,#30H
ACALL SEND_DATA
DJNZ COUNTER,L5
RET
;-------------------------------------------------------------------------------------------------
GET_OPERAND:
MOV A,52H
ACALL VALIDATE
ANL A,#0FH			;CONVERT FROM ASCII TO HEX
MOV B,A
MOV A,50H
ACALL VALIDATE
ANL A,#0FH
RET
;-------------------------------------------------------------------------------------------------
VALIDATE:			;CHECKS IF PRESSED KEY IS NOT DIGIT
MOV TEMP1,A
CLR C
SUBB A,#30H			;CHECKS PRESSED KEY ISN'T "+,-,*,/"
JC NOT_NUM
MOV A,TEMP1
CJNE A,#'=',VALID 	;CHECKS PRESSED KEY ISN'T "="
;SJMP ERROR
NOT_NUM: ACALL ERROR
LJMP AGAIN
VALID: RET
;-------------------------------------------------------------------------------------------------
BCD:			;CONVERTS NUMBER TO BCD 
MOV B,#10
DIV AB
ADD A,#30H		;FIRST DIGIT
ACALL SEND_DATA
MOV A,B
ADD A,#30H		;SECOND DIGIT
ACALL SEND_DATA
RET
;-------------------------------------------------------------------------------------------------
CLEAR:			;REMOVES LAST ENTRY FROM SCREEN 
MOV A,#10H		;AND RE-ENTERS THE KEY AGAIN
ACALL SEND_COMMAND
MOV A,#' '
ACALL SEND_DATA
MOV A,#10H
ACALL SEND_COMMAND
RET
;-------------------------------------------------------------------------------------------------
ERROR:
MOV A,#0C2H
ACALL SEND_COMMAND
MOV DPTR,#350H
PRINT: CLR A
MOVC A,@A+DPTR
JZ FINISH
ACALL SEND_DATA
INC DPTR
SJMP PRINT
FINISH: 
;LJMP AGAIN
RET
;-------------------------------------------------------------------------------------------------
READ_KEY:
MOV KEYPAD, #0FH
WAIT: MOV A,KEYPAD 
CJNE A,#0FH, WAIT		; CHECKS IF AN OLD BUTTON IS STILL PRESSED
WAIT2: MOV A,KEYPAD		
CJNE A,#0FH, OK			; CHECKS IF A NEW BUTTON IS PRESSED
SJMP WAIT2
OK: ACALL DEL_ROUTINE	; AVOIDS BUTTON DEBOUNCE THEN CHECK ON BUTTON AGAIN
MOV A,KEYPAD
CJNE A,#0FH, PRESSED   
SJMP WAIT2

PRESSED:
MOV KEYPAD, #11101111B
MOV A,KEYPAD
CJNE A,#11101111B, ROW1
MOV KEYPAD, #11011111B
MOV A,KEYPAD
CJNE A,#11011111B, ROW2		;SEARCHS FOR ROW OF PRESSED KEY
MOV KEYPAD, #10111111B
MOV A,KEYPAD
CJNE A,#10111111B, ROW3
MOV KEYPAD, #01111111B
MOV A,KEYPAD
CJNE A,#01111111B, ROW4

ROW1: MOV DPTR,#300H
SJMP FIND_COLUMN
ROW2: MOV DPTR,#304H
SJMP FIND_COLUMN			;SETS DATA POINTER TO FIRST 				
ROW3: MOV DPTR,#308H		;DIGIT/KEY IN THE FOUND ROW
SJMP FIND_COLUMN
ROW4: MOV DPTR,#30CH
SJMP FIND_COLUMN

FIND_COLUMN:
RRC A
JNC DONE					;SEARCHS FOR COLUMN OF PRESSED KEY
INC DPTR
SJMP FIND_COLUMN

DONE: CLR A
MOVC A,@A+DPTR
MOV TEMP3,A			
RET
;-----------------------------------------------------------------------------------------------
LCD_INIT:
Mov A,#38H		; 2 lines and 5*7 matrix, 8-bit mode
ACALL send_command    
MOV A,#0FH		; diplay on, cursor blinking 
ACALL send_command   
MOV A,#01H		; clear screen
ACALL send_command  
RET

SEND_COMMAND:   
MOV LCD_BUS, A   
CLR RS   
SETB EN
ACALL DEL_ROUTINE
CLR EN
ACALL DEL_ROUTINE
RET    

SEND_DATA: 
MOV LCD_BUS, A
SETB RS
SETB EN
ACALL DEL_ROUTINE
CLR EN
ACALL DEL_ROUTINE
RET       
;----------------------------------------------------------------------------------------------
DEL_ROUTINE:
MOV R1,#50
L1: MOV R2,#255
L2: DJNZ R2,L2   
DJNZ R1,L1 
RET
;----------------------------------------------------------------------------------------------
ORG 300H
	DB '1','2','3','/','4','5','6','*','7','8','9','-','C','0','=','+'
ORG 350H
	DB 'INVALID SYNTAX',0
END